{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport thwack from \"thwack\";\n\nconst useBlobUrl = imageUrl => {\n  _s();\n\n  const [blobUrl, setBlobUrl] = useState(\"\");\n  useEffect(() => {\n    // get the blob URL for this image URL (or null)\n    let url = sessionStorage.getItem(imageUrl);\n\n    async function fetchData() {\n      if (!url) {\n        // skip load if we have a URL previously stored in sessionStorage\n        const {\n          data\n        } = await thwack.get(imageUrl, {\n          responseType: \"blob\"\n        });\n        url = URL.createObjectURL(data); // create a \"blob URL\" (lasts per session)\n\n        sessionStorage.setItem(imageUrl, url); // save in session storage\n      }\n\n      setBlobUrl(url); // set in state\n    }\n\n    fetchData();\n  }, [imageUrl]); // only execure if imageUrl changes\n\n  return blobUrl;\n};\n\n_s(useBlobUrl, \"0cZP2wNzWsOI43+6RnP9JaOyn+Y=\");\n\nexport default useBlobUrl;","map":{"version":3,"sources":["/Users/vitto/Documents/PERSONAL/intern/meyd.it/client/src/pages/Maker/ImageBlob/useBlobUrl.js"],"names":["useEffect","useState","thwack","useBlobUrl","imageUrl","blobUrl","setBlobUrl","url","sessionStorage","getItem","fetchData","data","get","responseType","URL","createObjectURL","setItem"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,UAAU,GAAGC,QAAQ,IAAI;AAAA;;AAC7B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIO,GAAG,GAAGC,cAAc,CAACC,OAAf,CAAuBL,QAAvB,CAAV;;AAEA,mBAAeM,SAAf,GAA2B;AACzB,UAAI,CAACH,GAAL,EAAU;AACR;AACA,cAAM;AAAEI,UAAAA;AAAF,YAAW,MAAMT,MAAM,CAACU,GAAP,CAAWR,QAAX,EAAqB;AAAES,UAAAA,YAAY,EAAE;AAAhB,SAArB,CAAvB;AACAN,QAAAA,GAAG,GAAGO,GAAG,CAACC,eAAJ,CAAoBJ,IAApB,CAAN,CAHQ,CAGyB;;AACjCH,QAAAA,cAAc,CAACQ,OAAf,CAAuBZ,QAAvB,EAAiCG,GAAjC,EAJQ,CAI+B;AACxC;;AACDD,MAAAA,UAAU,CAACC,GAAD,CAAV,CAPyB,CAOR;AAClB;;AAEDG,IAAAA,SAAS;AACV,GAfQ,EAeN,CAACN,QAAD,CAfM,CAAT,CAH6B,CAkBb;;AAEhB,SAAOC,OAAP;AACD,CArBD;;GAAMF,U;;AAuBN,eAAeA,UAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport thwack from \"thwack\";\n\nconst useBlobUrl = imageUrl => {\n  const [blobUrl, setBlobUrl] = useState(\"\");\n\n  useEffect(() => {\n    // get the blob URL for this image URL (or null)\n    let url = sessionStorage.getItem(imageUrl);\n\n    async function fetchData() {\n      if (!url) {\n        // skip load if we have a URL previously stored in sessionStorage\n        const { data } = await thwack.get(imageUrl, { responseType: \"blob\" });\n        url = URL.createObjectURL(data); // create a \"blob URL\" (lasts per session)\n        sessionStorage.setItem(imageUrl, url); // save in session storage\n      }\n      setBlobUrl(url); // set in state\n    }\n\n    fetchData();\n  }, [imageUrl]); // only execure if imageUrl changes\n\n  return blobUrl;\n};\n\nexport default useBlobUrl;\n"]},"metadata":{},"sourceType":"module"}