{"ast":null,"code":"\"use strict\";\n/*\nReact-Quill\nhttps://github.com/zenoamaro/react-quill\n*/\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar react_1 = __importDefault(require(\"react\"));\n\nvar react_dom_1 = __importDefault(require(\"react-dom\"));\n\nvar isEqual_1 = __importDefault(require(\"lodash/isEqual\"));\n\nvar quill_1 = __importDefault(require(\"quill\"));\n\nvar ReactQuill =\n/** @class */\nfunction (_super) {\n  __extends(ReactQuill, _super);\n\n  function ReactQuill(props) {\n    var _this = _super.call(this, props) || this;\n    /*\n    Changing one of these props should cause a full re-render and a\n    re-instantiation of the Quill editor.\n    */\n\n\n    _this.dirtyProps = ['modules', 'formats', 'bounds', 'theme', 'children'];\n    /*\n    Changing one of these props should cause a regular update. These are mostly\n    props that act on the container, rather than the quillized editing area.\n    */\n\n    _this.cleanProps = ['id', 'className', 'style', 'placeholder', 'tabIndex', 'onChange', 'onChangeSelection', 'onFocus', 'onBlur', 'onKeyPress', 'onKeyDown', 'onKeyUp'];\n    _this.state = {\n      generation: 0\n    };\n    /*\n    Tracks the internal selection of the Quill editor\n    */\n\n    _this.selection = null;\n\n    _this.onEditorChange = function (eventName, rangeOrDelta, oldRangeOrDelta, source) {\n      var _a, _b, _c, _d;\n\n      if (eventName === 'text-change') {\n        (_b = (_a = _this).onEditorChangeText) === null || _b === void 0 ? void 0 : _b.call(_a, _this.editor.root.innerHTML, rangeOrDelta, source, _this.unprivilegedEditor);\n      } else if (eventName === 'selection-change') {\n        (_d = (_c = _this).onEditorChangeSelection) === null || _d === void 0 ? void 0 : _d.call(_c, rangeOrDelta, source, _this.unprivilegedEditor);\n      }\n    };\n\n    var value = _this.isControlled() ? props.value : props.defaultValue;\n    _this.value = value !== null && value !== void 0 ? value : '';\n    return _this;\n  }\n\n  ReactQuill.prototype.validateProps = function (props) {\n    var _a;\n\n    if (react_1.default.Children.count(props.children) > 1) throw new Error('The Quill editing area can only be composed of a single React element.');\n\n    if (react_1.default.Children.count(props.children)) {\n      var child = react_1.default.Children.only(props.children);\n      if (((_a = child) === null || _a === void 0 ? void 0 : _a.type) === 'textarea') throw new Error('Quill does not support editing on a <textarea>. Use a <div> instead.');\n    }\n\n    if (this.lastDeltaChangeSet && props.value === this.lastDeltaChangeSet) throw new Error('You are passing the `delta` object from the `onChange` event back ' + 'as `value`. You most probably want `editor.getContents()` instead. ' + 'See: https://github.com/zenoamaro/react-quill#using-deltas');\n  };\n\n  ReactQuill.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    var _this = this;\n\n    var _a;\n\n    this.validateProps(nextProps); // If the editor hasn't been instantiated yet, or the component has been\n    // regenerated, we already know we should update.\n\n    if (!this.editor || this.state.generation !== nextState.generation) {\n      return true;\n    } // Handle value changes in-place\n\n\n    if ('value' in nextProps) {\n      var prevContents = this.getEditorContents();\n      var nextContents = (_a = nextProps.value, _a !== null && _a !== void 0 ? _a : ''); // NOTE: Seeing that Quill is missing a way to prevent edits, we have to\n      //       settle for a hybrid between controlled and uncontrolled mode. We\n      //       can't prevent the change, but we'll still override content\n      //       whenever `value` differs from current state.\n      // NOTE: Comparing an HTML string and a Quill Delta will always trigger a\n      //       change, regardless of whether they represent the same document.\n\n      if (!this.isEqualValue(nextContents, prevContents)) {\n        this.setEditorContents(this.editor, nextContents);\n      }\n    } // Handle read-only changes in-place\n\n\n    if (nextProps.readOnly !== this.props.readOnly) {\n      this.setEditorReadOnly(this.editor, nextProps.readOnly);\n    } // Clean and Dirty props require a render\n\n\n    return __spreadArrays(this.cleanProps, this.dirtyProps).some(function (prop) {\n      return !isEqual_1.default(nextProps[prop], _this.props[prop]);\n    });\n  };\n\n  ReactQuill.prototype.shouldComponentRegenerate = function (nextProps) {\n    var _this = this; // Whenever a `dirtyProp` changes, the editor needs reinstantiation.\n\n\n    return this.dirtyProps.some(function (prop) {\n      return !isEqual_1.default(nextProps[prop], _this.props[prop]);\n    });\n  };\n\n  ReactQuill.prototype.componentDidMount = function () {\n    this.instantiateEditor();\n    this.setEditorContents(this.editor, this.getEditorContents());\n  };\n\n  ReactQuill.prototype.componentWillUnmount = function () {\n    this.destroyEditor();\n  };\n\n  ReactQuill.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _this = this; // If we're changing one of the `dirtyProps`, the entire Quill Editor needs\n    // to be re-instantiated. Regenerating the editor will cause the whole tree,\n    // including the container, to be cleaned up and re-rendered from scratch.\n    // Store the contents so they can be restored later.\n\n\n    if (this.editor && this.shouldComponentRegenerate(prevProps)) {\n      var delta = this.editor.getContents();\n      var selection = this.editor.getSelection();\n      this.regenerationSnapshot = {\n        delta: delta,\n        selection: selection\n      };\n      this.setState({\n        generation: this.state.generation + 1\n      });\n      this.destroyEditor();\n    } // The component has been regenerated, so it must be re-instantiated, and\n    // its content must be restored to the previous values from the snapshot.\n\n\n    if (this.state.generation !== prevState.generation) {\n      var _a = this.regenerationSnapshot,\n          delta = _a.delta,\n          selection_1 = _a.selection;\n      delete this.regenerationSnapshot;\n      this.instantiateEditor();\n      var editor_1 = this.editor;\n      editor_1.setContents(delta);\n      postpone(function () {\n        return _this.setEditorSelection(editor_1, selection_1);\n      });\n    }\n  };\n\n  ReactQuill.prototype.instantiateEditor = function () {\n    if (this.editor) {\n      this.hookEditor(this.editor);\n    } else {\n      this.editor = this.createEditor(this.getEditingArea(), this.getEditorConfig());\n    }\n  };\n\n  ReactQuill.prototype.destroyEditor = function () {\n    if (!this.editor) return;\n    this.unhookEditor(this.editor);\n  };\n  /*\n  We consider the component to be controlled if `value` is being sent in props.\n  */\n\n\n  ReactQuill.prototype.isControlled = function () {\n    return 'value' in this.props;\n  };\n\n  ReactQuill.prototype.getEditorConfig = function () {\n    return {\n      bounds: this.props.bounds,\n      formats: this.props.formats,\n      modules: this.props.modules,\n      placeholder: this.props.placeholder,\n      readOnly: this.props.readOnly,\n      scrollingContainer: this.props.scrollingContainer,\n      tabIndex: this.props.tabIndex,\n      theme: this.props.theme\n    };\n  };\n\n  ReactQuill.prototype.getEditor = function () {\n    if (!this.editor) throw new Error('Accessing non-instantiated editor');\n    return this.editor;\n  };\n  /**\n  Creates an editor on the given element. The editor will be passed the\n  configuration, have its events bound,\n  */\n\n\n  ReactQuill.prototype.createEditor = function (element, config) {\n    var editor = new quill_1.default(element, config);\n\n    if (config.tabIndex != null) {\n      this.setEditorTabIndex(editor, config.tabIndex);\n    }\n\n    this.hookEditor(editor);\n    return editor;\n  };\n\n  ReactQuill.prototype.hookEditor = function (editor) {\n    // Expose the editor on change events via a weaker, unprivileged proxy\n    // object that does not allow accidentally modifying editor state.\n    this.unprivilegedEditor = this.makeUnprivilegedEditor(editor); // Using `editor-change` allows picking up silent updates, like selection\n    // changes on typing.\n\n    editor.on('editor-change', this.onEditorChange);\n  };\n\n  ReactQuill.prototype.unhookEditor = function (editor) {\n    editor.off('editor-change', this.onEditorChange);\n  };\n\n  ReactQuill.prototype.getEditorContents = function () {\n    return this.value;\n  };\n\n  ReactQuill.prototype.getEditorSelection = function () {\n    return this.selection;\n  };\n  /*\n  True if the value is a Delta instance or a Delta look-alike.\n  */\n\n\n  ReactQuill.prototype.isDelta = function (value) {\n    return value && value.ops;\n  };\n  /*\n  Special comparison function that knows how to compare Deltas.\n  */\n\n\n  ReactQuill.prototype.isEqualValue = function (value, nextValue) {\n    if (this.isDelta(value) && this.isDelta(nextValue)) {\n      return isEqual_1.default(value.ops, nextValue.ops);\n    } else {\n      return isEqual_1.default(value, nextValue);\n    }\n  };\n  /*\n  Replace the contents of the editor, but keep the previous selection hanging\n  around so that the cursor won't move.\n  */\n\n\n  ReactQuill.prototype.setEditorContents = function (editor, value) {\n    var _this = this;\n\n    this.value = value;\n    var sel = this.getEditorSelection();\n\n    if (typeof value === 'string') {\n      editor.setContents(editor.clipboard.convert(value));\n    } else {\n      editor.setContents(value);\n    }\n\n    postpone(function () {\n      return _this.setEditorSelection(editor, sel);\n    });\n  };\n\n  ReactQuill.prototype.setEditorSelection = function (editor, range) {\n    this.selection = range;\n\n    if (range) {\n      // Validate bounds before applying.\n      var length_1 = editor.getLength();\n      range.index = Math.max(0, Math.min(range.index, length_1 - 1));\n      range.length = Math.max(0, Math.min(range.length, length_1 - 1 - range.index));\n      editor.setSelection(range);\n    }\n  };\n\n  ReactQuill.prototype.setEditorTabIndex = function (editor, tabIndex) {\n    var _a, _b;\n\n    if ((_b = (_a = editor) === null || _a === void 0 ? void 0 : _a.scroll) === null || _b === void 0 ? void 0 : _b.domNode) {\n      editor.scroll.domNode.tabIndex = tabIndex;\n    }\n  };\n\n  ReactQuill.prototype.setEditorReadOnly = function (editor, value) {\n    if (value) {\n      editor.disable();\n    } else {\n      editor.enable();\n    }\n  };\n  /*\n  Returns a weaker, unprivileged proxy object that only exposes read-only\n  accessors found on the editor instance, without any state-modifying methods.\n  */\n\n\n  ReactQuill.prototype.makeUnprivilegedEditor = function (editor) {\n    var e = editor;\n    return {\n      getHTML: function () {\n        return e.root.innerHTML;\n      },\n      getLength: e.getLength.bind(e),\n      getText: e.getText.bind(e),\n      getContents: e.getContents.bind(e),\n      getSelection: e.getSelection.bind(e),\n      getBounds: e.getBounds.bind(e)\n    };\n  };\n\n  ReactQuill.prototype.getEditingArea = function () {\n    if (!this.editingArea) {\n      throw new Error('Instantiating on missing editing area');\n    }\n\n    var element = react_dom_1.default.findDOMNode(this.editingArea);\n\n    if (!element) {\n      throw new Error('Cannot find element for editing area');\n    }\n\n    if (element.nodeType === 3) {\n      throw new Error('Editing area cannot be a text node');\n    }\n\n    return element;\n  };\n  /*\n  Renders an editor area, unless it has been provided one to clone.\n  */\n\n\n  ReactQuill.prototype.renderEditingArea = function () {\n    var _this = this;\n\n    var _a = this.props,\n        children = _a.children,\n        preserveWhitespace = _a.preserveWhitespace;\n    var generation = this.state.generation;\n    var properties = {\n      key: generation,\n      ref: function (instance) {\n        _this.editingArea = instance;\n      }\n    };\n\n    if (react_1.default.Children.count(children)) {\n      return react_1.default.cloneElement(react_1.default.Children.only(children), properties);\n    }\n\n    return preserveWhitespace ? react_1.default.createElement(\"pre\", __assign({}, properties)) : react_1.default.createElement(\"div\", __assign({}, properties));\n  };\n\n  ReactQuill.prototype.render = function () {\n    var _a;\n\n    return react_1.default.createElement(\"div\", {\n      id: this.props.id,\n      style: this.props.style,\n      key: this.state.generation,\n      className: \"quill \" + (_a = this.props.className, _a !== null && _a !== void 0 ? _a : ''),\n      onKeyPress: this.props.onKeyPress,\n      onKeyDown: this.props.onKeyDown,\n      onKeyUp: this.props.onKeyUp\n    }, this.renderEditingArea());\n  };\n\n  ReactQuill.prototype.onEditorChangeText = function (value, delta, source, editor) {\n    var _a, _b;\n\n    if (!this.editor) return; // We keep storing the same type of value as what the user gives us,\n    // so that value comparisons will be more stable and predictable.\n\n    var nextContents = this.isDelta(this.value) ? editor.getContents() : editor.getHTML();\n\n    if (nextContents !== this.getEditorContents()) {\n      // Taint this `delta` object, so we can recognize whether the user\n      // is trying to send it back as `value`, preventing a likely loop.\n      this.lastDeltaChangeSet = delta;\n      this.value = nextContents;\n      (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, value, delta, source, editor);\n    }\n  };\n\n  ReactQuill.prototype.onEditorChangeSelection = function (nextSelection, source, editor) {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (!this.editor) return;\n    var currentSelection = this.getEditorSelection();\n    var hasGainedFocus = !currentSelection && nextSelection;\n    var hasLostFocus = currentSelection && !nextSelection;\n    if (isEqual_1.default(nextSelection, currentSelection)) return;\n    this.selection = nextSelection;\n    (_b = (_a = this.props).onChangeSelection) === null || _b === void 0 ? void 0 : _b.call(_a, nextSelection, source, editor);\n\n    if (hasGainedFocus) {\n      (_d = (_c = this.props).onFocus) === null || _d === void 0 ? void 0 : _d.call(_c, nextSelection, source, editor);\n    } else if (hasLostFocus) {\n      (_f = (_e = this.props).onBlur) === null || _f === void 0 ? void 0 : _f.call(_e, currentSelection, source, editor);\n    }\n  };\n\n  ReactQuill.prototype.focus = function () {\n    if (!this.editor) return;\n    this.editor.focus();\n  };\n\n  ReactQuill.prototype.blur = function () {\n    if (!this.editor) return;\n    this.selection = null;\n    this.editor.blur();\n  };\n\n  ReactQuill.displayName = 'React Quill';\n  /*\n  Export Quill to be able to call `register`\n  */\n\n  ReactQuill.Quill = quill_1.default;\n  ReactQuill.defaultProps = {\n    theme: 'snow',\n    modules: {},\n    readOnly: false\n  };\n  return ReactQuill;\n}(react_1.default.Component);\n/*\nSmall helper to execute a function in the next micro-tick.\n*/\n\n\nfunction postpone(fn) {\n  Promise.resolve().then(fn);\n}\n\nmodule.exports = ReactQuill;","map":{"version":3,"mappings":"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","names":["__extends","props","_super","_this","generation","eventName","rangeOrDelta","oldRangeOrDelta","source","onEditorChangeText","_b","editor","root","innerHTML","unprivilegedEditor","onEditorChangeSelection","_d","value","isControlled","defaultValue","ReactQuill","react_1","Children","count","children","Error","child","only","_a","type","lastDeltaChangeSet","nextProps","nextState","validateProps","state","prevContents","getEditorContents","nextContents","isEqualValue","setEditorContents","readOnly","setEditorReadOnly","__spreadArrays","cleanProps","dirtyProps","some","prop","isEqual_1","instantiateEditor","destroyEditor","prevProps","prevState","shouldComponentRegenerate","delta","getContents","selection","getSelection","regenerationSnapshot","setState","selection_1","editor_1","setContents","postpone","setEditorSelection","hookEditor","createEditor","getEditingArea","getEditorConfig","unhookEditor","bounds","formats","modules","placeholder","scrollingContainer","tabIndex","theme","element","config","quill_1","setEditorTabIndex","makeUnprivilegedEditor","on","onEditorChange","off","ops","nextValue","isDelta","sel","getEditorSelection","clipboard","convert","range","length_1","getLength","index","Math","max","min","length","setSelection","scroll","domNode","disable","enable","e","getHTML","bind","getText","getBounds","editingArea","react_dom_1","findDOMNode","nodeType","preserveWhitespace","properties","key","ref","instance","cloneElement","id","style","className","onKeyPress","onKeyDown","onKeyUp","renderEditingArea","onChange","nextSelection","currentSelection","hasGainedFocus","hasLostFocus","onChangeSelection","onFocus","onBlur","_f","focus","blur","Component","fn","Promise","resolve","then","module"],"sources":["/Users/vitto/Documents/PERSONAL/intern/user-stories/client/node_modules/react-quill/src/index.tsx"],"sourcesContent":["/*\nReact-Quill\nhttps://github.com/zenoamaro/react-quill\n*/\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport isEqual from 'lodash/isEqual';\n\nimport Quill, {\n  QuillOptionsStatic,\n  DeltaStatic,\n  RangeStatic,\n  BoundsStatic,\n  StringMap,\n  Sources,\n} from 'quill';\n\n// Merged namespace hack to export types along with default object\n// See: https://github.com/Microsoft/TypeScript/issues/2719\nnamespace ReactQuill {\n  export type Value = string | DeltaStatic;\n  export type Range = RangeStatic | null;\n\n  export interface QuillOptions extends QuillOptionsStatic {\n    tabIndex?: number,\n  }\n\n  export interface ReactQuillProps {\n    bounds?: string | HTMLElement,\n    children?: React.ReactElement<any>,\n    className?: string,\n    defaultValue?: Value,\n    formats?: string[],\n    id?: string,\n    modules?: StringMap,\n    onChange?(\n      value: string,\n      delta: DeltaStatic,\n      source: Sources,\n      editor: UnprivilegedEditor,\n    ): void,\n    onChangeSelection?(\n      selection: Range,\n      source: Sources,\n      editor: UnprivilegedEditor,\n    ): void,\n    onFocus?(\n      selection: Range,\n      source: Sources,\n      editor: UnprivilegedEditor,\n    ): void,\n    onBlur?(\n      previousSelection: Range,\n      source: Sources,\n      editor: UnprivilegedEditor,\n    ): void,\n    onKeyDown?: React.EventHandler<any>,\n    onKeyPress?: React.EventHandler<any>,\n    onKeyUp?: React.EventHandler<any>,\n    placeholder?: string,\n    preserveWhitespace?: boolean,\n    readOnly?: boolean,\n    scrollingContainer?: string | HTMLElement,\n    style?: React.CSSProperties,\n    tabIndex?: number,\n    theme?: string,\n    value?: Value,\n  }\n\n  export interface UnprivilegedEditor {\n    getLength(): number;\n    getText(index?: number, length?: number): string;\n    getHTML(): string;\n    getBounds(index: number, length?: number): BoundsStatic;\n    getSelection(focus?: boolean): RangeStatic;\n    getContents(index?: number, length?: number): DeltaStatic;\n  }\n}\n\n// Re-import everything from namespace into scope for comfort\nimport Value = ReactQuill.Value;\nimport Range = ReactQuill.Range;\nimport QuillOptions = ReactQuill.QuillOptions;\nimport ReactQuillProps = ReactQuill.ReactQuillProps;\nimport UnprivilegedEditor = ReactQuill.UnprivilegedEditor;\n\ninterface ReactQuillState {\n  generation: number,\n}\n\nclass ReactQuill extends React.Component<ReactQuillProps, ReactQuillState> {\n\n  static displayName = 'React Quill'\n\n  /*\n  Export Quill to be able to call `register`\n  */\n  static Quill = Quill;\n\n  /*\n  Changing one of these props should cause a full re-render and a\n  re-instantiation of the Quill editor.\n  */\n  dirtyProps: (keyof ReactQuillProps)[] = [\n    'modules',\n    'formats',\n    'bounds',\n    'theme',\n    'children',\n  ]\n\n  /*\n  Changing one of these props should cause a regular update. These are mostly\n  props that act on the container, rather than the quillized editing area.\n  */\n  cleanProps: (keyof ReactQuillProps)[] = [\n    'id',\n    'className',\n    'style',\n    'placeholder',\n    'tabIndex',\n    'onChange',\n    'onChangeSelection',\n    'onFocus',\n    'onBlur',\n    'onKeyPress',\n    'onKeyDown',\n    'onKeyUp',\n  ]\n\n  static defaultProps = {\n    theme: 'snow',\n    modules: {},\n    readOnly: false,\n  }\n\n  state: ReactQuillState = {\n    generation: 0,\n  }\n\n  /*\n  The Quill Editor instance.\n  */\n  editor?: Quill\n\n  /*\n  Reference to the element holding the Quill editing area.\n  */\n  editingArea?: React.ReactInstance | null\n\n  /*\n  Tracks the internal value of the Quill editor\n  */\n  value: Value\n\n  /*\n  Tracks the internal selection of the Quill editor\n  */\n  selection: Range = null\n\n  /*\n  Used to compare whether deltas from `onChange` are being used as `value`.\n  */\n  lastDeltaChangeSet?: DeltaStatic\n\n  /*\n  Stores the contents of the editor to be restored after regeneration.\n  */\n  regenerationSnapshot?: {\n    delta: DeltaStatic,\n    selection: Range,\n  }\n\n  /*\n  A weaker, unprivileged proxy for the editor that does not allow accidentally\n  modifying editor state.\n  */\n  unprivilegedEditor?: UnprivilegedEditor\n\n  constructor(props: ReactQuillProps) {\n    super(props);\n    const value = this.isControlled()? props.value : props.defaultValue;\n    this.value = value ?? '';\n  }\n\n  validateProps(props: ReactQuillProps): void {\n    if (React.Children.count(props.children) > 1) throw new Error(\n      'The Quill editing area can only be composed of a single React element.'\n    );\n\n    if (React.Children.count(props.children)) {\n      const child = React.Children.only(props.children);\n      if (child?.type === 'textarea') throw new Error(\n        'Quill does not support editing on a <textarea>. Use a <div> instead.'\n      );\n    }\n\n    if (\n      this.lastDeltaChangeSet &&\n      props.value === this.lastDeltaChangeSet\n    ) throw new Error(\n      'You are passing the `delta` object from the `onChange` event back ' +\n      'as `value`. You most probably want `editor.getContents()` instead. ' +\n      'See: https://github.com/zenoamaro/react-quill#using-deltas'\n    );\n  }\n\n  shouldComponentUpdate(nextProps: ReactQuillProps, nextState: ReactQuillState) {\n    this.validateProps(nextProps);\n\n    // If the editor hasn't been instantiated yet, or the component has been\n    // regenerated, we already know we should update.\n    if (!this.editor || this.state.generation !== nextState.generation) {\n      return true;\n    }\n\n    // Handle value changes in-place\n    if ('value' in nextProps) {\n      const prevContents = this.getEditorContents();\n      const nextContents = nextProps.value ?? '';\n\n      // NOTE: Seeing that Quill is missing a way to prevent edits, we have to\n      //       settle for a hybrid between controlled and uncontrolled mode. We\n      //       can't prevent the change, but we'll still override content\n      //       whenever `value` differs from current state.\n      // NOTE: Comparing an HTML string and a Quill Delta will always trigger a\n      //       change, regardless of whether they represent the same document.\n      if (!this.isEqualValue(nextContents, prevContents)) {\n        this.setEditorContents(this.editor, nextContents);\n      }\n    }\n\n    // Handle read-only changes in-place\n    if (nextProps.readOnly !== this.props.readOnly) {\n      this.setEditorReadOnly(this.editor, nextProps.readOnly!);\n    }\n\n    // Clean and Dirty props require a render\n    return [...this.cleanProps, ...this.dirtyProps].some((prop) => {\n      return !isEqual(nextProps[prop], this.props[prop]);\n    });\n  }\n\n  shouldComponentRegenerate(nextProps: ReactQuillProps): boolean {\n    // Whenever a `dirtyProp` changes, the editor needs reinstantiation.\n    return this.dirtyProps.some((prop) => {\n      return !isEqual(nextProps[prop], this.props[prop]);\n    });\n  }\n\n  componentDidMount() {\n    this.instantiateEditor();\n    this.setEditorContents(this.editor!, this.getEditorContents());\n  }\n\n  componentWillUnmount() {\n    this.destroyEditor();\n  }\n\n  componentDidUpdate(prevProps: ReactQuillProps, prevState: ReactQuillState) {\n    // If we're changing one of the `dirtyProps`, the entire Quill Editor needs\n    // to be re-instantiated. Regenerating the editor will cause the whole tree,\n    // including the container, to be cleaned up and re-rendered from scratch.\n    // Store the contents so they can be restored later.\n    if (this.editor && this.shouldComponentRegenerate(prevProps)) {\n      const delta = this.editor.getContents();\n      const selection = this.editor.getSelection();\n      this.regenerationSnapshot = {delta, selection};\n      this.setState({generation: this.state.generation + 1});\n      this.destroyEditor();\n    }\n\n    // The component has been regenerated, so it must be re-instantiated, and\n    // its content must be restored to the previous values from the snapshot.\n    if (this.state.generation !== prevState.generation) {\n      const {delta, selection} = this.regenerationSnapshot!;\n      delete this.regenerationSnapshot;\n      this.instantiateEditor();\n      const editor = this.editor!;\n      editor.setContents(delta);\n      postpone(() => this.setEditorSelection(editor, selection));\n    }\n  }\n\n  instantiateEditor(): void {\n    if (this.editor) {\n      this.hookEditor(this.editor);\n    } else {\n      this.editor = this.createEditor(\n        this.getEditingArea(),\n        this.getEditorConfig()\n      );\n    }\n  }\n\n  destroyEditor(): void {\n    if (!this.editor) return;\n    this.unhookEditor(this.editor);\n  }\n\n  /*\n  We consider the component to be controlled if `value` is being sent in props.\n  */\n  isControlled(): boolean {\n    return 'value' in this.props;\n  }\n\n  getEditorConfig(): QuillOptions {\n    return {\n      bounds: this.props.bounds,\n      formats: this.props.formats,\n      modules: this.props.modules,\n      placeholder: this.props.placeholder,\n      readOnly: this.props.readOnly,\n      scrollingContainer: this.props.scrollingContainer,\n      tabIndex: this.props.tabIndex,\n      theme: this.props.theme,\n    };\n  }\n\n  getEditor(): Quill {\n    if (!this.editor) throw new Error('Accessing non-instantiated editor');\n    return this.editor;\n  }\n\n  /**\n  Creates an editor on the given element. The editor will be passed the\n  configuration, have its events bound,\n  */\n  createEditor(element: Element, config: QuillOptions) {\n    const editor = new Quill(element, config);\n    if (config.tabIndex != null) {\n      this.setEditorTabIndex(editor, config.tabIndex);\n    }\n    this.hookEditor(editor);\n    return editor;\n  }\n\n  hookEditor(editor: Quill) {\n    // Expose the editor on change events via a weaker, unprivileged proxy\n    // object that does not allow accidentally modifying editor state.\n    this.unprivilegedEditor = this.makeUnprivilegedEditor(editor);\n    // Using `editor-change` allows picking up silent updates, like selection\n    // changes on typing.\n    editor.on('editor-change', this.onEditorChange);\n  }\n\n  unhookEditor(editor: Quill) {\n    editor.off('editor-change', this.onEditorChange);\n  }\n\n  getEditorContents(): Value {\n    return this.value;\n  }\n\n  getEditorSelection(): Range {\n    return this.selection;\n  }\n\n  /*\n  True if the value is a Delta instance or a Delta look-alike.\n  */\n  isDelta(value: any): boolean {\n    return value && value.ops;\n  }\n\n  /*\n  Special comparison function that knows how to compare Deltas.\n  */\n  isEqualValue(value: any, nextValue: any): boolean {\n    if (this.isDelta(value) && this.isDelta(nextValue)) {\n      return isEqual(value.ops, nextValue.ops);\n    } else {\n      return isEqual(value, nextValue);\n    }\n  }\n\n  /*\n  Replace the contents of the editor, but keep the previous selection hanging\n  around so that the cursor won't move.\n  */\n  setEditorContents(editor: Quill, value: Value) {\n    this.value = value;\n    const sel = this.getEditorSelection();\n    if (typeof value === 'string') {\n      editor.setContents(editor.clipboard.convert(value));\n    } else {\n      editor.setContents(value);\n    }\n    postpone(() => this.setEditorSelection(editor, sel));\n  }\n\n  setEditorSelection(editor: Quill, range: Range) {\n    this.selection = range;\n    if (range) {\n      // Validate bounds before applying.\n      const length = editor.getLength();\n      range.index = Math.max(0, Math.min(range.index, length-1));\n      range.length = Math.max(0, Math.min(range.length, (length-1) - range.index));\n      editor.setSelection(range);\n    }\n  }\n\n  setEditorTabIndex(editor: Quill, tabIndex: number) {\n    if (editor?.scroll?.domNode) {\n      (editor.scroll.domNode as HTMLElement).tabIndex = tabIndex;\n    }\n  }\n\n  setEditorReadOnly(editor: Quill, value: boolean) {\n    if (value) {\n      editor.disable();\n    } else {\n      editor.enable();\n    }\n  }\n\n  /*\n  Returns a weaker, unprivileged proxy object that only exposes read-only\n  accessors found on the editor instance, without any state-modifying methods.\n  */\n  makeUnprivilegedEditor(editor: Quill) {\n    const e = editor;\n    return {\n      getHTML:      () => e.root.innerHTML,\n      getLength:    e.getLength.bind(e),\n      getText:      e.getText.bind(e),\n      getContents:  e.getContents.bind(e),\n      getSelection: e.getSelection.bind(e),\n      getBounds:    e.getBounds.bind(e),\n    };\n  }\n\n  getEditingArea(): Element {\n    if (!this.editingArea) {\n      throw new Error('Instantiating on missing editing area');\n    }\n    const element = ReactDOM.findDOMNode(this.editingArea);\n    if (!element) {\n      throw new Error('Cannot find element for editing area');\n    }\n    if (element.nodeType === 3) {\n      throw new Error('Editing area cannot be a text node');\n    }\n    return element as Element;\n  }\n\n  /*\n  Renders an editor area, unless it has been provided one to clone.\n  */\n  renderEditingArea(): JSX.Element {\n    const {children, preserveWhitespace} = this.props;\n    const {generation} = this.state;\n\n    const properties = {\n      key: generation,\n      ref: (instance: React.ReactInstance | null) => {\n        this.editingArea = instance\n      },\n    };\n\n    if (React.Children.count(children)) {\n      return React.cloneElement(\n        React.Children.only(children)!,\n        properties\n      );\n    }\n\n    return preserveWhitespace ?\n      <pre {...properties}/> :\n      <div {...properties}/>;\n  }\n\n  render() {\n    return (\n      <div\n        id={this.props.id}\n        style={this.props.style}\n        key={this.state.generation}\n        className={`quill ${this.props.className ?? ''}`}\n        onKeyPress={this.props.onKeyPress}\n        onKeyDown={this.props.onKeyDown}\n        onKeyUp={this.props.onKeyUp}\n      >\n        {this.renderEditingArea()}\n      </div>\n    );\n  }\n\n  onEditorChange = (\n    eventName: 'text-change' | 'selection-change',\n    rangeOrDelta: Range | DeltaStatic,\n    oldRangeOrDelta: Range | DeltaStatic,\n    source: Sources,\n  ) => {\n    if (eventName === 'text-change') {\n      this.onEditorChangeText?.(\n        this.editor!.root.innerHTML,\n        rangeOrDelta as DeltaStatic,\n        source,\n        this.unprivilegedEditor!\n      );\n    } else if (eventName === 'selection-change') {\n      this.onEditorChangeSelection?.(\n        rangeOrDelta as RangeStatic,\n        source,\n        this.unprivilegedEditor!\n      );\n    }\n  };\n\n  onEditorChangeText(\n    value: string,\n    delta: DeltaStatic,\n    source: Sources,\n    editor: UnprivilegedEditor,\n  ): void {\n    if (!this.editor) return;\n\n    // We keep storing the same type of value as what the user gives us,\n    // so that value comparisons will be more stable and predictable.\n    const nextContents = this.isDelta(this.value)\n      ? editor.getContents()\n      : editor.getHTML();\n\n    if (nextContents !== this.getEditorContents()) {\n      // Taint this `delta` object, so we can recognize whether the user\n      // is trying to send it back as `value`, preventing a likely loop.\n      this.lastDeltaChangeSet = delta;\n\n      this.value = nextContents;\n      this.props.onChange?.(value, delta, source, editor);\n    }\n  }\n\n  onEditorChangeSelection(\n    nextSelection: RangeStatic,\n    source: Sources,\n    editor: UnprivilegedEditor,\n  ): void {\n    if (!this.editor) return;\n    const currentSelection = this.getEditorSelection();\n    const hasGainedFocus = !currentSelection && nextSelection;\n    const hasLostFocus = currentSelection && !nextSelection;\n\n    if (isEqual(nextSelection, currentSelection)) return;\n\n    this.selection = nextSelection;\n    this.props.onChangeSelection?.(nextSelection, source, editor);\n\n    if (hasGainedFocus) {\n      this.props.onFocus?.(nextSelection, source, editor);\n    } else if (hasLostFocus) {\n      this.props.onBlur?.(currentSelection, source, editor);\n    }\n  }\n\n  focus(): void {\n    if (!this.editor) return;\n    this.editor.focus();\n  }\n\n  blur(): void {\n    if (!this.editor) return;\n    this.selection = null;\n    this.editor.blur();\n  }\n}\n\n/*\nSmall helper to execute a function in the next micro-tick.\n*/\nfunction postpone(fn: (value: void) => void) {\n  Promise.resolve().then(fn);\n}\n\n// Compatibility Export to avoid `require(...).default` on CommonJS.\n// See: https://github.com/Microsoft/TypeScript/issues/2719\nexport = ReactQuill;\n"]},"metadata":{},"sourceType":"script"}