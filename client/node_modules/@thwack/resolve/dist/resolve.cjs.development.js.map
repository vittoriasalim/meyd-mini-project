{"version":3,"file":"resolve.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["// This is a clone of `new URL(url, base).href`\n// It is bases on the following RegEx.\n// ^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n// $1 = http:\n// $2 = http                //protocol\n// $3 = //www.example.com\n// $4 = www.example.com     //domain `undefined` is missing or \"\" if present but blank\n// $5 = /foo/bar/ or foo    //path\n// $6 = ?a=b                //search\n// $7 = a=b\n// $8 = #hash               //hash\n// $9 = hash\n// Note 1: all but $5 will be undefined if missing. $5 will be \"\"\n// Note 2: $5 will be \"undefined\" (the string) if uri is undefined\n// see https://tools.ietf.org/html/rfc3986#appendix-B\n\nconst parseUri = (uri = '') => {\n  const parts = /^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/i.exec(\n    uri\n  ) as Array<string>;\n  const [\n    ,\n    ,\n    protocol = '', // raw protocol ex: `http`\n    slashslash, // domain with leading `//`\n    domain, // let domain be undefined\n    path,\n    search = '',\n    ,\n    hash = '',\n  ] = parts;\n  return { protocol, slashslash, domain, path, search, hash };\n};\n\n// \"?x=123\", \"http://ex.co/foo\" => \"http://ex.co/foo?x=123\"\nexport const resolve = (url: string, base: string): string => {\n  const u = parseUri(url);\n  const b = parseUri(base);\n\n  const getPath = () => {\n    const searchHash = u.search + u.hash;\n\n    if (u.path.startsWith('/')) {\n      // u is absolute so ignore b\n      return u.path.substr(1) + searchHash; // use u.path w/no leading slash\n    }\n    if (b.path.endsWith('/')) {\n      // u=\"bar/baz/\" b=\"/foo/\" res=\"foo/bar/baz\"\n      return b.path.substr(1) + u.path + searchHash;\n    }\n    if (u.path) {\n      return u.path + searchHash;\n    }\n    if (b.path.startsWith('/')) {\n      return b.path.substr(1) + searchHash; // use u.path w/no leading slash\n    }\n    return b.path + searchHash;\n  };\n\n  const protocol = u.protocol || b.protocol;\n  const domain = u.domain ?? b.domain;\n  if (\n    (u.slashslash === '//' && u.path === '/') ||\n    !base ||\n    !protocol ||\n    domain === undefined\n  ) {\n    // A fully qualified URL *must* have a protocol and a domain\n    throw new TypeError('Invalid base URL');\n  }\n\n  return `${protocol.toLowerCase()}://${domain.toLowerCase()}/${getPath()}`;\n};\n"],"names":["parseUri","uri","parts","exec","protocol","slashslash","domain","path","search","hash","resolve","url","base","u","b","getPath","searchHash","startsWith","substr","endsWith","undefined","TypeError","toLowerCase"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD;MAACA;AAAAA,IAAAA,MAAM;;;AACtB,MAAMC,KAAK,GAAG,gEAAgEC,IAAhE,CACZF,GADY,CAAd;gBAaIC;MAPFE,gCAAW;;AACXC,EAAAA,aAMEH;;AALFI,EAAAA,SAKEJ;;AAJFK,EAAAA,OAIEL;iBAAAA;MAHFM,+BAAS;iBAGPN;MADFO,6BAAO;AAET,SAAO;AAAEL,IAAAA,QAAQ,EAARA,QAAF;AAAYC,IAAAA,UAAU,EAAVA,UAAZ;AAAwBC,IAAAA,MAAM,EAANA,MAAxB;AAAgCC,IAAAA,IAAI,EAAJA,IAAhC;AAAsCC,IAAAA,MAAM,EAANA,MAAtC;AAA8CC,IAAAA,IAAI,EAAJA;AAA9C,GAAP;AACD,CAhBD;;;IAmBaC,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,EAAcC,IAAd;;;AACrB,MAAMC,CAAC,GAAGb,QAAQ,CAACW,GAAD,CAAlB;AACA,MAAMG,CAAC,GAAGd,QAAQ,CAACY,IAAD,CAAlB;;AAEA,MAAMG,OAAO,GAAG,SAAVA,OAAU;AACd,QAAMC,UAAU,GAAGH,CAAC,CAACL,MAAF,GAAWK,CAAC,CAACJ,IAAhC;;AAEA,QAAII,CAAC,CAACN,IAAF,CAAOU,UAAP,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B;AACA,aAAOJ,CAAC,CAACN,IAAF,CAAOW,MAAP,CAAc,CAAd,IAAmBF,UAA1B,CAF0B;AAG3B;;AACD,QAAIF,CAAC,CAACP,IAAF,CAAOY,QAAP,CAAgB,GAAhB,CAAJ,EAA0B;AACxB;AACA,aAAOL,CAAC,CAACP,IAAF,CAAOW,MAAP,CAAc,CAAd,IAAmBL,CAAC,CAACN,IAArB,GAA4BS,UAAnC;AACD;;AACD,QAAIH,CAAC,CAACN,IAAN,EAAY;AACV,aAAOM,CAAC,CAACN,IAAF,GAASS,UAAhB;AACD;;AACD,QAAIF,CAAC,CAACP,IAAF,CAAOU,UAAP,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,aAAOH,CAAC,CAACP,IAAF,CAAOW,MAAP,CAAc,CAAd,IAAmBF,UAA1B,CAD0B;AAE3B;;AACD,WAAOF,CAAC,CAACP,IAAF,GAASS,UAAhB;AACD,GAlBD;;AAoBA,MAAMZ,QAAQ,GAAGS,CAAC,CAACT,QAAF,IAAcU,CAAC,CAACV,QAAjC;AACA,MAAME,MAAM,gBAAGO,CAAC,CAACP,MAAL,iDAAeQ,CAAC,CAACR,MAA7B;;AACA,MACGO,CAAC,CAACR,UAAF,KAAiB,IAAjB,IAAyBQ,CAAC,CAACN,IAAF,KAAW,GAArC,IACA,CAACK,IADD,IAEA,CAACR,QAFD,IAGAE,MAAM,KAAKc,SAJb,EAKE;AACA;AACA,UAAM,IAAIC,SAAJ,CAAc,kBAAd,CAAN;AACD;;AAED,SAAUjB,QAAQ,CAACkB,WAAT,EAAV,WAAsChB,MAAM,CAACgB,WAAP,EAAtC,SAA8DP,OAAO,EAArE;AACD;;;;"}