{"version":3,"file":"thwack.modern.js","sources":["../src/core/defaults.js","../src/core/utils/buildUrl/sortByEntry.js","../src/core/utils/buildUrl/defaultParamsSerializer.js","../src/core/utils/buildUrl/index.js","../src/core/utils/buildUrl/substituteParamsInPath.js","../src/core/utils/buildUrl/joinSearch.js","../src/core/utils/computeContentType.js","../src/core/utils/defaultValidateStatus.js","../src/core/utils/compatParser.js","../src/core/ThwackResponse.js","../src/core/ThwackEvents/ThwackEvent.js","../src/core/ThwackEvents/ThwackResponseBaseEvent.js","../src/core/ThwackEvents/ThwackDataEvent.js","../src/core/ThwackEvents/ThwackErrorEvent.js","../src/core/ThwackErrors/ThwackResponseError.js","../src/core/returnResponse.js","../src/core/utils/computeParser.js","../src/core/ThwackEvents/ThwackResponseEvent.js","../src/core/ThwackEvents/ThwackRequestEvent.js","../src/core/utils/deepSpreadOptions.js","../src/core/utils/combineOptions.js","../src/core/request.js","../src/core/fetcher.js","../src/core/Thwack.js","../src/core/utils/resolveOptionsFromArgs.js","../src/core/events.js","../src/core/index.js","../src/default/index.js"],"sourcesContent":["export const APPLICATION_JSON = 'application/json';\nexport const CONTENT_TYPE = 'content-type';\n\nexport const defaultOptions = {\n  maxDepth: 5,\n  params: {},\n  headers: {\n    accept: `${APPLICATION_JSON}, text/plain, */*`,\n  },\n  buildURL: 'complete',\n};\n\nexport const defaultParserMap = {\n  [APPLICATION_JSON]: 'json',\n  'multipart/form-data': 'formData',\n  '*/*': 'text',\n  'text/event-stream': 'stream',\n};\n","// take a pair from Array.entries (key/value) and sort the key alphabetically\nconst sortByEntry = ([a], [b]) => {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\n\nexport default sortByEntry;\n","import sortByEntry from './sortByEntry';\n\nexport const defaultParamSerializer = (params) =>\n  Object.entries(params)\n    .sort(sortByEntry)\n    .map(\n      ([key, value]) =>\n        `${encodeURIComponent(key)}=${encodeURIComponent(value)}`\n    )\n    .join('&');\n","import { resolve } from '@thwack/resolve';\nimport joinSearch from './joinSearch';\nimport { defaultParamSerializer } from './defaultParamsSerializer';\nimport { substituteParamsInPath } from './substituteParamsInPath';\n\nconst buildUrl = (options) => {\n  const {\n    url,\n    baseURL = url, // resolver throws if baseURL is empty (per spec)\n    params,\n    resolver = resolve,\n    paramsSerializer = defaultParamSerializer,\n  } = options;\n\n  // resolve url=foo base=http://ex.co => http://ex.co/foo\n  const absoluteUrl = resolver(url, baseURL);\n\n  // convert http://ex.co/foo:id => http://ex.co/foo/123\n  const [moreUrl, remainingParams] = substituteParamsInPath(\n    absoluteUrl,\n    params\n  );\n\n  // url=http://ex.co/foo/123 params={y:2, x:1} => http://ex.co/foo/123?x=1&y=2\n  const search = paramsSerializer(remainingParams);\n  return joinSearch(moreUrl, search);\n};\n\nexport default buildUrl;\n","export const substituteParamsInPath = (path, params) => {\n  // substitute any :name in the path for params.name\n  const remainingParams = { ...params };\n  const newPath = path\n    .split('/')\n    .map((segment) => {\n      if (segment.startsWith(':')) {\n        const key = segment.substr(1);\n        const value = remainingParams[key];\n        delete remainingParams[key];\n        return encodeURIComponent(value);\n      }\n      return segment;\n    })\n    .join('/');\n\n  return [newPath, remainingParams];\n};\n","const joinSearch = (url, search) => {\n  const concatChar = url.includes('?') ? '&' : '?';\n  return `${url}${search ? concatChar : ''}${search}`;\n};\n\nexport default joinSearch;\n","import { APPLICATION_JSON } from '../defaults';\n\n// Only test for instanceodf Blob if running on a system that supports them.\n// Blobs are not supported on NodeJS, for example.\nconst isBlobSupported = typeof Blob !== 'undefined';\n\n// If the data is a Blob, grab its type\n// else default to 'application/json'\nconst computeContentType = (data) =>\n  isBlobSupported && data instanceof Blob ? data.type : APPLICATION_JSON;\n\nexport default computeContentType;\n","export const defaultValidateStatus = (status) => status >= 200 && status < 300;\n","// Axios options for options.responseType are:\n// 'arraybuffer', 'document', 'json', 'text', 'stream', 'blob'\n\nconst compatMap = {\n  arraybuffer: 'arrayBuffer',\n  document: 'formData',\n};\n\nconst compatParser = (responseParserType) =>\n  compatMap[responseParserType] || responseParserType;\n\nexport default compatParser;\n","import { defaultValidateStatus } from './utils/defaultValidateStatus';\n\nexport default class ThwackResponse {\n  constructor(response, options) {\n    const {\n      status = 200,\n      statusText = `Status ${status}`,\n      data,\n      headers = {},\n    } = response;\n    this.status = status;\n    this.statusText = statusText;\n    this.ok = defaultValidateStatus(status);\n    this.data = data;\n    this.headers =\n      typeof headers.entries === 'function' // TODO why can't I do `headers instanceof Headers`?\n        ? Object.fromEntries(headers.entries())\n        : headers;\n    this.options = options;\n    this.response = response;\n  }\n}\n","// TODO make this extend CustomEvent and use EventTarget some day? Maybe?\nexport default class ThwackEvent {\n  constructor(type, payload) {\n    this.type = type;\n    this.defaultPrevented = false;\n    this.propagationStopped = false;\n    this._payload = payload;\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n\n  stopPropagation() {\n    this.propagationStopped = true;\n  }\n}\n","import ThwackEvent from './ThwackEvent';\n\nexport default class ThwackResponseBaseEvent extends ThwackEvent {\n  constructor(type, thwackResponse) {\n    super(type, thwackResponse);\n\n    Object.defineProperty(this, 'thwackResponse', {\n      get() {\n        return this._payload;\n      },\n    });\n  }\n}\n","import ThwackResponseBaseEvent from './ThwackResponseBaseEvent';\n\nexport default class ThwackDataEvent extends ThwackResponseBaseEvent {\n  constructor(thwackResponse) {\n    super('data', thwackResponse);\n  }\n}\n","import ThwackResponseBaseEvent from './ThwackResponseBaseEvent';\n\nexport default class ThwackErrorEvent extends ThwackResponseBaseEvent {\n  constructor(thwackResponse) {\n    super('error', thwackResponse);\n  }\n}\n","const thwackResponseError = 'ThwackResponseError';\n\nclass ThwackResponseError extends Error {\n  constructor(thwackResponse) {\n    super(thwackResponseError);\n    this.message = `Status ${thwackResponse.status}`;\n    this.name = thwackResponseError;\n    this.thwackResponse = thwackResponse;\n  }\n}\n\nexport default ThwackResponseError;\n","import { CONTENT_TYPE } from './defaults';\nimport { defaultValidateStatus } from './utils/defaultValidateStatus';\nimport computeParser from './utils/computeParser';\nimport compatParser from './utils/compatParser';\nimport ThwackResponse from './ThwackResponse';\nimport ThwackDataEvent from './ThwackEvents/ThwackDataEvent';\nimport ThwackErrorEvent from './ThwackEvents/ThwackErrorEvent';\nimport ThwackResponseError from './ThwackErrors/ThwackResponseError';\n\nasync function fetchResponseData(thwackResponse) {\n  const { response, options } = thwackResponse;\n\n  // if `response` is NOT a instance of `Response` then it is \"synthetic\"\n  // (i.e. created from a mock source) so don't stream and parse the body.\n  // Instead, return the synthetic `thwackResponse.data` field.\n  // Note: React Native does NOT expose `body` so stream is unsupported\n  // see https://github.com/facebook/react-native/issues/27741\n  const { responseType, responseParserMap } = options;\n  const contentTypeHeader = thwackResponse.headers[CONTENT_TYPE];\n  const responseParserType =\n    responseType || computeParser(contentTypeHeader, responseParserMap);\n  const compatResponseParserType = compatParser(responseParserType); // axios > thwack mapping\n\n  if (compatResponseParserType === 'stream') {\n    return response.body;\n  }\n\n  if (response[compatResponseParserType]) {\n    return response[compatResponseParserType]();\n  }\n\n  // Return the synthetic data\n  return thwackResponse.data;\n}\n\n// return either a thwackResponse (if 2xx) or throw a ThwackResponseError\nconst returnResponse = async function (thwackResponse) {\n  if (!(thwackResponse instanceof ThwackResponse)) {\n    throw new Error('Thwack: callback must return a ThwackResponse');\n  }\n  // eslint-disable-next-line no-param-reassign\n  thwackResponse.data = await fetchResponseData(thwackResponse);\n\n  const { validateStatus = defaultValidateStatus } = thwackResponse.options;\n\n  // should we\n  if (validateStatus(thwackResponse.status)) {\n    // dispatch a \"data\" event here\n    const dataEvent = new ThwackDataEvent(thwackResponse);\n    const payload = await this.dispatchEvent(dataEvent);\n    const { defaultPrevented } = dataEvent;\n    if (defaultPrevented && !payload.ok) {\n      return returnResponse.call(this, payload);\n    }\n    return payload;\n  }\n\n  // if NOT ok then throw, but first dispatch an \"error\" event\n  const errorEvent = new ThwackErrorEvent(thwackResponse);\n  const payload = await this.dispatchEvent(errorEvent);\n  const { defaultPrevented } = errorEvent;\n  if (defaultPrevented && payload.ok) {\n    return returnResponse.call(this, payload);\n  }\n\n  if (!(payload instanceof ThwackResponse)) {\n    throw new Error('Thwack: callback must return a ThwackResponse');\n  }\n\n  throw new ThwackResponseError(payload);\n};\n\nexport default returnResponse;\n","import { defaultParserMap } from '../defaults';\n\nconst computeParser = (contentTypeHeader = '', parserMap) => {\n  // grab just the actual type\n  // ex: 'application/json; charset=utf-8' => 'application/json'\n  const [contentType] = contentTypeHeader.split(';');\n  const contentTypeTrimmed = contentType.trim(); // just in case there's a misbehaving server\n\n  // grab just the \"category\"\n  // ex: 'application/json' => 'application'\n  const [contentTypeMajor] = contentTypeTrimmed.split('/');\n  const mergedParserMap = { ...defaultParserMap, ...parserMap };\n\n  const parserType =\n    mergedParserMap[contentTypeTrimmed] || // ex: 'application/json'\n    mergedParserMap[`${contentTypeMajor}/*`] || // ex: 'application/*'\n    mergedParserMap['*/*']; // default to parser type specified by '*/*'\n\n  return parserType;\n};\n\nexport default computeParser;\n","import ThwackResponseBaseEvent from './ThwackResponseBaseEvent';\n\nexport default class ThwackResponseEvent extends ThwackResponseBaseEvent {\n  constructor(thwackResponse) {\n    super('response', thwackResponse);\n  }\n}\n","import ThwackEvent from './ThwackEvent';\n\nexport default class ThwackRequestEvent extends ThwackEvent {\n  constructor(options) {\n    super('request', options);\n\n    Object.defineProperty(this, 'options', {\n      get() {\n        return this._payload;\n      },\n    });\n  }\n}\n","const isObject = (obj) =>\n  Object.prototype.toString.call(obj) === '[object Object]';\n\nconst deepSpreadOptions = (createOptions = {}, options = {}) => {\n  const allKeys = Object.keys({\n    ...createOptions,\n    ...options,\n  });\n\n  return allKeys.reduce((combined, key) => {\n    // TODO use nullish coalescing when supported by microbundle, like this:\n    // const value = options[key] ?? createOptions[key];\n    const value = options[key] != null ? options[key] : createOptions[key];\n\n    return {\n      ...combined,\n      [key]: isObject(value)\n        ? deepSpreadOptions(createOptions[key], options[key])\n        : value,\n    };\n  }, {});\n};\n\nexport default deepSpreadOptions;\n","import deepSpreadOptions from './deepSpreadOptions';\n\nconst combineOptions = (instance, options) =>\n  deepSpreadOptions(instance.defaults, options);\n\nexport default combineOptions;\n","import fetcher from './fetcher';\nimport returnResponse from './returnResponse';\nimport ThwackResponseEvent from './ThwackEvents/ThwackResponseEvent';\nimport ThwackRequestEvent from './ThwackEvents/ThwackRequestEvent';\nimport combineOptions from './utils/combineOptions';\nimport ThwackResponse from './ThwackResponse';\n\nconst request = async function (requestOptions) {\n  // Compute the options to use\n  // 1. combine options from:\n  //  a. passed `requestOptions`\n  //  b. `this.defaults` (i.e. when instance was created)\n  //  c. and all parents' `this.defaults`\n  // 2. dispatch those options to any listeners (they _may_ change them)\n  //    by returning a new options as payload\n  // 3. set options to the returned payload unless...\n  //    payload is a ThwackResponse, in which skip calling fetcher\n  const { maxDepth, ...combinedOptions } = combineOptions(this, requestOptions);\n\n  // before we do anything, dispatch a \"request\" event with the combined options\n  // one of the callbacks may optionally return a ThwackResponse (if preventDefault)\n  // or possibly alter the options\n  const requestEvent = new ThwackRequestEvent(combinedOptions);\n  const payload = await this.dispatchEvent(requestEvent);\n  const { defaultPrevented } = requestEvent;\n  if (defaultPrevented) {\n    // bail out with a ThwackResponse (will be checked in returnResponse)\n    return returnResponse.call(this, payload);\n  }\n\n  // assume payload is options (fetcher will check for sure)\n  const options = payload;\n  const response = await fetcher(options);\n  const responseEvent = new ThwackResponseEvent(\n    new ThwackResponse(response, options)\n  );\n\n  // no need to check preventDefault here as both the default and the alternative\n  // would both lead to returnResponse\n  return returnResponse.call(this, await this.dispatchEvent(responseEvent));\n};\n\nexport default request;\n","import { APPLICATION_JSON, CONTENT_TYPE } from './defaults';\nimport buildUrl from './utils/buildUrl';\nimport computeContentType from './utils/computeContentType';\n\nconst fetcher = async function (options) {\n  const {\n    url,\n    baseURL,\n    fetch,\n    data,\n    headers,\n    params,\n    responseParserMap,\n    responseType,\n    maxDepth, // don't pass to fetch\n    ...rest\n  } = options;\n\n  if (!fetch) {\n    throw new Error(\n      'Thwack: Invalid options object during request. Check your event callbacks.'\n    );\n  }\n\n  // choose content-type based on the type of data\n  if (data && !headers[CONTENT_TYPE]) {\n    headers[CONTENT_TYPE] = computeContentType(data);\n  }\n  const body =\n    data && headers[CONTENT_TYPE] === APPLICATION_JSON\n      ? JSON.stringify(data)\n      : data;\n\n  const fetchUrl = buildUrl({ ...options, url, baseURL });\n\n  const fetchOptions = {\n    ...(Object.keys(headers).length !== 0 && { headers }), // add if not empty object\n    ...(!!body && { body, method: 'POST' }), // if body not empty add it and default method to POST\n    ...rest,\n  };\n\n  return fetch(fetchUrl, fetchOptions);\n};\n\nexport default fetcher;\n","import request from './request';\nimport combineOptions from './utils/combineOptions';\nimport buildUrl from './utils/buildUrl';\nimport resolveOptionsFromArgs from './utils/resolveOptionsFromArgs';\nimport { events } from './events';\n\nexport const createThwack = function (defaults, parent) {\n  // createThwack returns a function that accepts (url, options)\n  //  or just (options), but calls request with just (options)\n  const instance = (...args) => instance.request(resolveOptionsFromArgs(args));\n\n  instance.defaults = defaults;\n\n  instance.request = request.bind(instance);\n\n  // Create convenience methods on this instance\n  ['GET', 'DELETE', 'HEAD'].forEach((method) => {\n    const methodKey = method.toLowerCase();\n    instance[methodKey] = (url, options) =>\n      instance.request({ ...options, method, url });\n  });\n\n  ['PUT', 'POST', 'PATCH'].forEach((method) => {\n    const methodKey = method.toLowerCase();\n    instance[methodKey] = (url, data, options) =>\n      instance.request({ ...options, method, url, data });\n  });\n\n  instance.getUri = (options) => {\n    const combinedOptions = combineOptions(instance, options);\n    return buildUrl(combinedOptions);\n  };\n\n  instance.create = (options) => {\n    const createOptions = combineOptions(instance, options);\n    return createThwack(createOptions, instance);\n  };\n\n  events(instance, parent);\n\n  return instance;\n};\n","const resolveOptionsFromArgs = (args) =>\n  args.length > 1 // url, options?\n    ? { ...args[1], url: args[0] } // yes, use a combined options\n    : args[0]; // no, use the original options\n\nexport default resolveOptionsFromArgs;\n","/* eslint-disable no-param-reassign */\n\nexport const events = (instance, parent) => {\n  // private properties\n  let depth = 0;\n  const listeners = {\n    request: [],\n    response: [],\n    data: [],\n    error: [],\n  };\n\n  instance.addEventListener = (type, callback) => {\n    listeners[type].push(callback);\n  };\n\n  instance.removeEventListener = (type, callback) => {\n    listeners[type] = listeners[type].filter(\n      (listener) => listener !== callback\n    );\n  };\n\n  instance.dispatchEvent = (event) =>\n    listeners[event.type]\n      .reduce(\n        (promise, listener) =>\n          promise\n            // call our next callback (unless propagationStopped was called)\n            .then(\n              // TODO use nullish coalescing when supported by microbundle, like this:\n              // () => !event.propagationStopped ?? listener(event)\n              () => {\n                depth += 1;\n                if (depth >= 5) {\n                  throw new Error('Thwack: maximum request depth reached');\n                }\n                return event.propagationStopped ? undefined : listener(event);\n              }\n            )\n            .finally(() => {\n              depth -= 1;\n            })\n            // if callback returned payload (or a promise that resolves to payload)\n            // then set the payload in the event object\n            .then((payload) => {\n              if (payload !== undefined) {\n                event._payload = payload;\n              }\n            }),\n        // start with the promise from the parent or a resolved promise if no parent\n        parent ? parent.dispatchEvent(event) : Promise.resolve()\n      )\n      // return the event payload to the caller\n      .then(() => event._payload);\n};\n","import { createThwack } from './Thwack';\nimport ThwackResponseError from './ThwackErrors/ThwackResponseError';\nimport ThwackResponse from './ThwackResponse';\nimport { defaultOptions } from './defaults';\n\n// expose a single Thwack instance using top level defaults\nconst mainInstance = createThwack(defaultOptions);\n\n// export these \"static\" methods only on the main instance\nmainInstance.ThwackResponseError = ThwackResponseError;\nmainInstance.ThwackResponse = ThwackResponse;\nmainInstance.all = (promises) => Promise.all(promises);\nmainInstance.spread = (callback) => (results) => callback(...results);\n\nexport default mainInstance;\n","// This is the file used when you import from 'thwack'\nimport core from '../core';\n\nif (typeof window !== 'undefined') {\n  const { fetch, location } = window;\n  core.defaults.fetch = fetch;\n\n  /* istanbul ignore next */\n  if (location) {\n    const { origin, pathname } = location;\n    core.defaults.baseURL = `${origin}${pathname}`;\n  }\n}\n\nexport default core;\n"],"names":["defaultParserMap","application/json","multipart/form-data","*/*","text/event-stream","sortByEntry","a","b","defaultParamSerializer","params","Object","entries","sort","map","key","value","encodeURIComponent","join","buildUrl","options","url","baseURL","resolver","resolve","paramsSerializer","absoluteUrl","moreUrl","remainingParams","path","split","segment","startsWith","substr","substituteParamsInPath","search","concatChar","includes","joinSearch","isBlobSupported","Blob","defaultValidateStatus","status","compatMap","arraybuffer","document","ThwackResponse","constructor","response","statusText","data","headers","this","ok","fromEntries","ThwackEvent","type","payload","defaultPrevented","propagationStopped","_payload","preventDefault","stopPropagation","ThwackResponseBaseEvent","thwackResponse","super","defineProperty","get","ThwackDataEvent","ThwackErrorEvent","ThwackResponseError","Error","message","name","returnResponse","async","responseType","responseParserMap","compatResponseParserType","responseParserType","contentTypeHeader","parserMap","contentType","contentTypeTrimmed","trim","contentTypeMajor","mergedParserMap","computeParser","body","fetchResponseData","validateStatus","dataEvent","dispatchEvent","call","errorEvent","ThwackResponseEvent","ThwackRequestEvent","deepSpreadOptions","createOptions","keys","reduce","combined","[object Object]","obj","prototype","toString","combineOptions","instance","defaults","request","requestOptions","combinedOptions","requestEvent","fetch","rest","computeContentType","JSON","stringify","length","method","fetcher","responseEvent","createThwack","parent","args","resolveOptionsFromArgs","bind","forEach","methodKey","toLowerCase","getUri","create","depth","listeners","error","addEventListener","callback","push","removeEventListener","filter","listener","event","promise","then","undefined","finally","Promise","events","mainInstance","maxDepth","accept","buildURL","all","promises","spread","results","window","location","core","origin","pathname"],"mappings":"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"}